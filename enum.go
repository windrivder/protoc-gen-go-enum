package main

import (
	"fmt"
	"strings"
	"unicode"

	"golang.org/x/text/cases"
	"golang.org/x/text/language"

	"google.golang.org/protobuf/compiler/protogen"
)

const (
	fmtPackage = protogen.GoImportPath("fmt")
)

var enCases = cases.Title(language.AmericanEnglish, cases.NoLower)

// generateFile generates a _errors.pb.go file containing kratos errors definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + "_enum.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-enum. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	g.QualifiedGoIdent(fmtPackage.Ident(""))
	generateFileContent(gen, file, g)
	return g
}

// generateFileContent generates the kratos errors definitions, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	g.P()
	index := 0

	enums := []string{}
	for _, message := range file.Messages {
		for _, enum := range message.Enums {
			enums = append(enums, string(message.Desc.Name()))
			if !genEnum(gen, file, g, enum, string(message.Desc.Name())) {
				index++
			}
		}
	}
	// If all enums do not contain 'errors.code', the current file is skipped
	if index == 0 {
		g.Skip()
	} else {
		tmpl := `"%s": mapEnums(%sValues, func(item %s) enums { return item })`
		for idx, enum := range enums {
			enums[idx] = fmt.Sprintf(tmpl, enum, enum, enum)
		}
		g.P(fmt.Sprintf(`type enums interface {
	String() string
	Comment() string
}

func mapEnums[T any](collection []T, iteratee func(item T) enums) []enums {
	result := make([]enums, len(collection))
	for i, item := range collection {
		result[i] = iteratee(item)
	}
	return result
}

var Enums = map[string][]enums{
	%s,
}`, strings.Join(enums, ",\n\t")))
	}
}

func genEnum(_ *protogen.Plugin, _ *protogen.File, g *protogen.GeneratedFile, enum *protogen.Enum, message string) bool {
	name := string(enum.Desc.Name())
	if message != "" {
		name = message
	}

	etype := string(enum.Desc.Name())
	if message != "" {
		// etype = fmt.Sprintf("%s%s", message, etype)
		etype = message
	}

	ew := enumWrapper{Name: name, Type: etype}
	for _, v := range enum.Values {
		comment := v.Comments.Leading.String()
		if comment == "" {
			comment = v.Comments.Trailing.String()
		}

		err := &enumInfo{
			Name:       name,
			Value:      string(v.Desc.Name()),
			CamelValue: case2Camel(string(v.Desc.Name())),
			Comment:    formatComment(comment),
		}
		ew.Enumes = append(ew.Enumes, err)
	}
	if len(ew.Enumes) == 0 {
		return true
	}
	g.P(ew.execute())

	return false
}

func formatComment(s string) string {
	s = strings.ReplaceAll(s, "//", "")
	return strings.TrimSpace(s)
}

func case2Camel(name string) string {
	if !strings.Contains(name, "_") {
		if name == strings.ToUpper(name) {
			name = strings.ToLower(name)
		}
		return enCases.String(name)
	}
	strs := strings.Split(name, "_")
	words := make([]string, 0, len(strs))
	for _, w := range strs {
		hasLower := false
		for _, r := range w {
			if unicode.IsLower(r) {
				hasLower = true
				break
			}
		}
		if !hasLower {
			w = strings.ToLower(w)
		}
		w = enCases.String(w)
		words = append(words, w)
	}

	return strings.Join(words, "")
}
